{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "inputs": [
        {
            "id": "version",
            "description": "Please enter the version number (e.g., v1.3.0)",
            "default": "v1.3.0",
            "type": "promptString"
        }
    ],
    "tasks": [
        // ==================== Development Build ====================
        {
            "label": "Dev: Build Frontend",
            "type": "shell",
            "command": "make js-build VERBOSE=2",
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "problemMatcher": [
                "$tsc"
            ]
        },
        {
            "label": "Dev: Build Backend",
            "type": "shell",
            "command": "make go-build VERBOSE=2 CHANNEL='development' ARCH='amd64' OS='linux' SIGN='0'",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [
                "$go"
            ]
        },
        {
            "label": "Dev: Quick Build",
            "type": "shell",
            "command": "make quick-build VERBOSE=2"
        },
        {
            "label": "Dev: Full Build",
            "type": "shell",
            "command": "make build VERBOSE=2"
        },
        {
            "label": "Dev: Run AdGuardPrivate",
            "type": "shell",
            "command": "./AdGuardPrivate -c ../AdGuardHome.yaml -w ./data --web-addr 0.0.0.0:34020 --local-frontend --no-check-update --verbose",
            "problemMatcher": []
        },
        // ==================== Release Build ====================
         {
            "label": "Release: Build Dev",
            "type": "shell",
            "command": "make build-release VERBOSE=2 CHANNEL='development' VERSION='v1.3.0' ARCH='amd64' OS='linux' SIGN='0' FRONTEND_PREBUILT='1'"
        },
        {
            "label": "Release: Build Release",
            "type": "shell",
            "command": "make build-release VERBOSE=2 CHANNEL='development' VERSION='${input:version}' ARCH='amd64 arm64' OS='linux' SIGN='0' FRONTEND_PREBUILT='1'"
        },
        // ==================== Docker Operations ====================
        {
            "label": "Docker: Build Dev Image",
            "type": "shell",
            "command": "make build-docker VERBOSE=2 CHANNEL='development' ARCH='amd64 arm64' DOCKER_IMAGE_NAME='adguardprivate' DOCKER_OUTPUT='type=docker,name=adguardprivate:dev,push=false'"
        },
        {
            "label": "Docker: Run Dev Container",
            "type": "shell",
            "command": "docker run --rm --name AdGuardPrivatev -p 50000:3000 -p 50001:80 -p 50002:443 -p 50003:853 -p 50004:53/udp -v ./data/container/work:/opt/adguardhome/work -v ./data/container/conf:/opt/adguardhome/conf adguardprivate:dev"
        },
        {
            "label": "Docker: Build Dev Image (Legacy)",
            "type": "shell",
            "command": "make build-docker VERBOSE=2 CHANNEL='development' ARCH='amd64' DOCKER_IMAGE_NAME='adguardprivate-dev' DOCKER_OUTPUT='type=docker,dest=./dist/docker/AdGuardPrivate_linux_amd64_.tar' VERBOSE=2"
        },
        {
            "label": "Docker: Load Dev Image (Legacy)",
            "type": "shell",
            "command": "docker load -i ./dist/docker/AdGuardPrivate_linux_amd64_.tar && IMAGE_ID=$(docker images -q --filter \"dangling=true\" | head -n 1) && docker tag $IMAGE_ID adguardprivate-dev:dev && echo \"Loaded and tagged image $IMAGE_ID as adguardprivate-dev\""
        },
        {
            "label": "Docker: Run Dev Container (Legacy)",
            "type": "shell",
            "command": "docker run --rm --name AdGuardPrivate-dev -p 50000:3000 -p 50001:80 -p 50002:443 -p 50003:853 -p 50004:53/udp -v ./data/container/work:/opt/adguardhome/work -v ./data/container/conf:/opt/adguardhome/conf adguardprivate-dev:dev"
        },
        {
            "label": "Docker: Update Dist Files",
            "type": "shell",
            "command": "mkdir -p dist/docker && cp -f dist/AdGuardPrivate_linux_amd64/AdGuardPrivate/AdGuardPrivate dist/docker/AdGuardPrivate_linux_amd64_ && cp -f dist/AdGuardPrivate_linux_arm64/AdGuardPrivate/AdGuardPrivate dist/docker/AdGuardPrivate_linux_arm64_"
        },
        // ==================== Release & Deploy ====================
        {
            "label": "Deploy: Push Base Image to Aliyun",
            "type": "shell",
            "command": "docker buildx build --platform linux/amd64,linux/arm64 -f docker/Dockerfile.base -t registry.cn-hangzhou.aliyuncs.com/adguardprivate/adguardprivate:base . --push"
        },
        {
            "label": "Deploy Dev: Push Dev to Aliyun (Full)",
            "type": "shell",
            "command": "make build-docker VERBOSE=2 CHANNEL='development' ARCH='amd64' DOCKER_IMAGE_NAME='registry.cn-hangzhou.aliyuncs.com/adguardprivate/adguardprivate' DOCKER_OUTPUT='type=image,name=registry.cn-hangzhou.aliyuncs.com/adguardprivate/adguardprivate:dev,push=true'",
            "dependsOn": [
                "Dev: Build Frontend",
                "Release: Build Release",
            ]
        },
        {
            "label": "Deploy Dev: Push Dev to Aliyun (Quick)",
            "type": "shell",
            "command": "docker buildx build --platform linux/amd64 -f docker/Dockerfile.quick -t registry.cn-hangzhou.aliyuncs.com/adguardprivate/adguardprivate:dev . --push",
            "dependsOrder": "sequence",
            "dependsOn": [
                "Dev: Build Frontend",
                "Release: Build Dev",
                // "Docker: Update Dist Files"
            ],
            "problemMatcher": [
                "$go",
                "$tsc"
            ]
        },
        {
            "label": "Deploy: Push Version to Aliyun (Full)",
            "type": "shell",
            "command": "make build-docker VERBOSE=2 CHANNEL='development' VERSION='${input:version}' ARCH='amd64 arm64' DOCKER_IMAGE_NAME='registry.cn-hangzhou.aliyuncs.com/adguardprivate/adguardprivate' DOCKER_OUTPUT='type=image,name=registry.cn-hangzhou.aliyuncs.com/adguardprivate/adguardprivate:${input:version},push=true'",
            "dependsOn": [
                "Dev: Build Frontend",
                "Release: Build Release"
            ]
        },
        {
            "label": "Deploy: Push Version to Aliyun (Quick)",
            "type": "shell",
            "command": "docker buildx build --platform linux/amd64,linux/arm64 -f docker/Dockerfile.quick -t registry.cn-hangzhou.aliyuncs.com/adguardprivate/adguardprivate:${input:version} . --push",
            "dependsOrder": "sequence",
            "dependsOn": [
                "Dev: Build Frontend",
                "Release: Build Release",
                "Docker: Update Dist Files"
            ],
            "problemMatcher": [
                "$go",
                "$tsc"
            ]
        },
        {
            "label": "Deploy: Push Latest to Aliyun (Full)",
            "type": "shell",
            "command": "make build-docker VERBOSE=2 CHANNEL='development' ARCH='amd64 arm64' DOCKER_IMAGE_NAME='registry.cn-hangzhou.aliyuncs.com/adguardprivate/adguardprivate' DOCKER_OUTPUT='type=image,name=registry.cn-hangzhou.aliyuncs.com/adguardprivate/adguardprivate:latest,push=true'",
            "dependsOn": [
                "Dev: Build Frontend",
                "Release: Build Release"
            ]
        },
        {
            "label": "Deploy: Push Latest to Aliyun (Quick)",
            "type": "shell",
            "command": "docker buildx build --platform linux/amd64,linux/arm64 -f docker/Dockerfile.quick -t registry.cn-hangzhou.aliyuncs.com/adguardprivate/adguardprivate:latest . --push",
            "dependsOrder": "sequence",
            "dependsOn": [
                "Dev: Build Frontend",
                "Release: Build Release",
                "Docker: Update Dist Files"
            ],
            "problemMatcher": [
                "$go",
                "$tsc"
            ]
        },
        {
            "label": "Deploy: Push to Docker Hub",
            "type": "shell",
            "command": "docker buildx build --platform linux/amd64,linux/arm64 -f docker/Dockerfile.quick -t docker.io/adguardprivate/adguardprivate:${input:version} -t docker.io/adguardprivate/adguardprivate:latest . --push",
            "dependsOrder": "sequence",
            "dependsOn": [
                "Dev: Build Frontend",
                "Release: Build Release",
                "Docker: Update Dist Files"
            ],
            "problemMatcher": [
                "$go",
                "$tsc"
            ]
        },
        // ==================== Tools & Testing ====================
        {
            "label": "Tools: DNS Query Test",
            "type": "shell",
            "command": "./tools/q -s https://dns.jqknono.com:34025 -t A -w -q google.com"
        },
        {
            "label": "Tools: Run Tests",
            "type": "shell",
            "command": "VERBOSE=2 && bash ./scripts/make/go-test.sh"
        },
        {
            "label": "Tools: Format Code (gofumpt)",
            "type": "shell",
            "command": "gofumpt --extra -e -l ."
        },
        {
            "label": "Tools: Git Commit (No Verify)",
            "type": "shell",
            "command": "git commit --no-verify -m 'adguardprivate commit'"
        },
        // ==================== Internationalization ====================
        {
            "label": "i18n: Convert Table to JSON",
            "type": "shell",
            "command": "cd ./scripts/i18n && ./table_to_i18n.py",
            "group": "none",
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "i18n: Convert JSON to Table",
            "type": "shell",
            "command": "cd ./scripts/i18n && ./i18n_to_table.py",
            "group": "none",
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": []
        },
        // ==================== Deprecated ====================
        {
            "label": "[DEPRECATED] Customize Build Init",
            "type": "shell",
            "command": "bash customize-init.sh"
        },
        {
            "label": "[DEPRECATED] Simple Build",
            "type": "shell",
            "command": "bash customize-build.sh"
        }
    ]
}